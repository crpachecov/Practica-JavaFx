/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package spa;

import com.toedter.calendar.JDateChooser;
import config.Connections;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.table.DefaultTableModel;

public class AppointmentProfessionals extends javax.swing.JPanel {

    private String[][] serviceData = new String[100][4];

    Connections con = new Connections();
    Connection cn = con.conectar();

    DefaultTableModel ta = new DefaultTableModel() {

        public boolean isCellEditable(int rows, int columns) {//Celdas no editables
            return false;
        }
    };

    public AppointmentProfessionals() {
        initComponents();

        String[] columnNames = {"ID", "DNI", "Nombre", "Fecha", "Hora", "Servicio", "Profesional"};
        ta.setColumnIdentifiers(columnNames);
        tableAppointment.setModel(ta);

        for (int i = 0; i < 5; i++) {
            if (i != 2) {
                if (i % 2 == 0) {
                    tableAppointment.getColumnModel().getColumn(i).setPreferredWidth(10);
                } else {
                    tableAppointment.getColumnModel().getColumn(i).setPreferredWidth(30);
                }
            }
        }

        fillServiceData();
        fillTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableAppointment = new javax.swing.JTable();

        setBackground(new java.awt.Color(153, 153, 153));
        setForeground(new java.awt.Color(153, 153, 153));

        tableAppointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Cedula", "Nombre", "Hora", "Profesional", "Servicio"
            }
        ));
        jScrollPane1.setViewportView(tableAppointment);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private String convertDate(JDateChooser date) {
        String dateString;
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            Date selectedDate = date.getDate();
            dateString = sdf.format(selectedDate);
            return dateString;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "";
    }

    private void fillTable() {
        //"ID" "DNI", "Nombre", "Fecha", "Hora", "Servicio", "Profesional"
        ta.setRowCount(0);
        String[][] dataTbA = new String[100][6];

        try {
            String query = "SELECT id_appointments, time, date, customers_dni, services_id FROM appointments";
            PreparedStatement pst = cn.prepareStatement(query);
            ResultSet resultSet = pst.executeQuery();

            int rowIndex = 0;
            while (resultSet.next()) {

                dataTbA[rowIndex][0] = String.valueOf(resultSet.getInt("id_appointments"));
                dataTbA[rowIndex][1] = resultSet.getString("time");
                dataTbA[rowIndex][2] = resultSet.getString("date");
                dataTbA[rowIndex][3] = resultSet.getString("customers_dni");

                //funcion extraer nombre de servicio y proessional
                String[] namesServices = getNameServices(String.valueOf(resultSet.getInt("services_id"))).split("-");
                dataTbA[rowIndex][4] = namesServices[0].trim();//servicio
                dataTbA[rowIndex][5] = namesServices[1];//nombre profesional

                ta.addRow(new Object[]{dataTbA[rowIndex][0], dataTbA[rowIndex][3], getNameCustomers(dataTbA[rowIndex][3]), dataTbA[rowIndex][2], dataTbA[rowIndex][1], dataTbA[rowIndex][4], dataTbA[rowIndex][5]});
                rowIndex++;
            }
            resultSet.close();
            pst.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void fillServiceData() {
        try {
            String query = "SELECT s.id_services, s.type, s.professionals_dni, p.name, p.last_name FROM services AS s INNER JOIN professionals AS p ON s.professionals_dni = p.dni";
            PreparedStatement pst = cn.prepareStatement(query);
            ResultSet resultSet = pst.executeQuery();

            // Iterate through the ResultSet and populate the array
            int rowIndex = 0;
            while (resultSet.next()) {

                serviceData[rowIndex][0] = resultSet.getString("id_services");
                serviceData[rowIndex][1] = resultSet.getString("type");
                serviceData[rowIndex][2] = resultSet.getString("professionals_dni");
                serviceData[rowIndex][3] = resultSet.getString("name") + " " + resultSet.getString("last_name");

                rowIndex++;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private String getNameCustomers(String dni) {
        try {
            String query = "SELECT name, last_name FROM customers WHERE dni = ?";
            PreparedStatement pst = cn.prepareStatement(query);
            pst.setString(1, dni);

            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                return rs.getString("name") + " " + rs.getString("last_name");
            }
            rs.close();
            pst.close();
            //SQLException
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return "null";
    }

    private String getNameServices(String idService) {
        //data[i][3] esta el nombre professional
        //data[i][1] esta el tipo servicio
        //data[i][0] esta el id servicios
        for (int i = 0; i < serviceData.length; i++) {
            if (serviceData[i][0].equals(idService)) {
                return serviceData[i][1] + "-" + serviceData[i][3];
            } else {
                break;
            }
        }
        return "null";
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableAppointment;
    // End of variables declaration//GEN-END:variables
}
